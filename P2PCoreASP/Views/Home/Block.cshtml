@model Blockchain_P2P_NetworkTest.ViewModels.IndexViewModel

@{
	ViewBag.Title = "Blockhain";
}




<h2>@ViewBag.Title </h2>


<h4 class="text-success">
	@if (!string.IsNullOrEmpty(Model.ClientMessage) || !string.IsNullOrEmpty(Model.ServerMessage))
	{
	<span>
		You are
		@if (!string.IsNullOrEmpty(Model.ClientMessage))
		{
			<strong> Client </strong>
		}
		@if (!string.IsNullOrEmpty(Model.ServerMessage))
		{
			<strong> Server </strong>
		}
	</span>
	}
	@*@Model.ServerMessage*@
</h4>

@using (Html.BeginForm(actionName: "Block", controllerName: "Home", method: FormMethod.Post))
{
	@Html.AntiForgeryToken()

	<div class="form-horizontal">
		<h4>IndexViewModel</h4>
		<hr />
		@Html.ValidationSummary(true, "", new { @class = "text-danger" })

		<div class="form-group">
			@Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Port, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Port, new { htmlAttributes = new { @class = "form-control", type = "number" } })
				@Html.ValidationMessageFor(model => model.Port, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
			</div>
		</div>



		<div class="form-group">
			@Html.LabelFor(model => model.Menu, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DropDownListFor(model => model.Menu, new SelectList(
								 Model.Menus,
								 "Id",
								 "Name"),
			   new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.Menu, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.RecieveName, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.RecieveName, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.RecieveName, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", type = "number" } })
				@Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.ServerUrlConnect, htmlAttributes: new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.EditorFor(model => model.ServerUrlConnect, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(model => model.ServerUrlConnect, "", new { @class = "text-danger" })
			</div>
		</div>



		<div class="form-group">
			<div class="col-md-offset-2 col-md-10">
				<input type="submit" value="Submit" class="btn btn-default" />
			</div>
		</div>

		<div class="row">
			<div class="col-12">
				@foreach (var item in Model.Result)
				{
					<div>
						@item
						<br />
						<hr />
					</div>
				}
			</div>
		</div>
	</div>
}


@section Scripts {
	@Scripts.Render("~/bundles/jqueryval")
}
